/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ViewChild, ElementRef, forwardRef, Input, Output, EventEmitter, Renderer } from '@angular/core';
import { NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';
export class LSelect2Component {
    /**
     * @param {?} _renderer
     */
    constructor(_renderer) {
        this._renderer = _renderer;
        this.options = {};
        this.required = false;
        this.maxCount = Number.MAX_SAFE_INTEGER;
        this.minCount = Number.MIN_SAFE_INTEGER;
        this.valueChange = new EventEmitter();
        this._onChange = (/**
         * @param {?} _
         * @return {?}
         */
        (_) => { });
        this._onTouched = (/**
         * @return {?}
         */
        () => { });
    }
    /**
     * @return {?}
     */
    ngOnInit() { }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this._jqueryElement = $(this.selectControll.nativeElement);
        this.initSelect2();
        this._jqueryElement.on('select2:select select2:unselect', (/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            /** @type {?} */
            let data = this._jqueryElement.select2('data');
            for (let item of data) {
                delete item.element;
                delete item.disabled;
                delete item.selected;
            }
            if (!this.options.multiple) {
                data = (e.type == 'select2:unselect') ? null : data[0];
            }
            this.selectedValue = data;
            this._onChange(data);
            this.valueChange.emit(data);
        }));
        if (this.selectedValue) {
            this.setSelect2Value(this.selectedValue);
        }
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (!this._jqueryElement)
            return;
        if (this.hasChanged(changes)) {
            this.initSelect2();
            if (this.selectedValue) {
                this.setSelect2Value(this.selectedValue);
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._jqueryElement.select2('destroy');
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        this.selectedValue = value;
        if (value !== null && value !== undefined)
            this.setSelect2Value(value);
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this._onChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this._onTouched = fn;
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    /**
     * @param {?} c
     * @return {?}
     */
    validate(c) {
        if (this.disabled) {
            return null;
        }
        /** @type {?} */
        let length = this.selectedValue ? this.selectedValue.length : 0;
        if (this.required === true && length === 0) {
            return { required: true };
        }
        if (this.minCount > 0 && length < this.minCount) {
            return { minCount: true };
        }
        if (this.maxCount > 0 && length > this.maxCount) {
            return { maxCount: true };
        }
        return null;
    }
    /**
     * @private
     * @return {?}
     */
    initSelect2() {
        if (this._jqueryElement.hasClass('select2-hidden-accessible') == true) {
            this._jqueryElement.select2('destroy');
            this._renderer.setElementProperty(this.selectControll.nativeElement, 'innerHTML', '');
        }
        /** @type {?} */
        let options = {
            data: this.data
        };
        Object.assign(options, this.options);
        this._jqueryElement.select2(options);
    }
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    setSelect2Value(value) {
        if (!this._jqueryElement || !value) {
            this.selectedValue = value;
            return;
        }
        ;
        /** @type {?} */
        let targetVal = value['id'] || value;
        if (Array.isArray(value)) {
            targetVal = value.map((/**
             * @param {?} x
             * @return {?}
             */
            x => x['id']));
        }
        this._jqueryElement.val(targetVal).trigger('change');
    }
    /**
     * @private
     * @param {?} changes
     * @return {?}
     */
    hasChanged(changes) {
        if (changes['data'] && JSON.stringify(changes['data'].previousValue) !== JSON.stringify(changes['data'].currentValue)) {
            return true;
        }
        if (changes['options'] && JSON.stringify(changes['options'].previousValue) !== JSON.stringify(changes['options'].currentValue)) {
            return true;
        }
        return false;
    }
}
LSelect2Component.decorators = [
    { type: Component, args: [{
                selector: 'l-select2',
                template: "<select #selectControll [disabled]=\"disabled\" style=\"width: 100%\">\r\n  <ng-content select=\"option, optgroup\">\r\n  </ng-content>\r\n</select>",
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => LSelect2Component)),
                        multi: true
                    },
                    {
                        provide: NG_VALIDATORS,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => LSelect2Component)),
                        multi: true
                    }
                ]
            }] }
];
/** @nocollapse */
LSelect2Component.ctorParameters = () => [
    { type: Renderer }
];
LSelect2Component.propDecorators = {
    selectControll: [{ type: ViewChild, args: ['selectControll',] }],
    data: [{ type: Input }],
    disabled: [{ type: Input }],
    options: [{ type: Input }],
    required: [{ type: Input }],
    maxCount: [{ type: Input }],
    minCount: [{ type: Input }],
    valueChange: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    LSelect2Component.prototype.selectControll;
    /** @type {?} */
    LSelect2Component.prototype.data;
    /** @type {?} */
    LSelect2Component.prototype.disabled;
    /** @type {?} */
    LSelect2Component.prototype.options;
    /** @type {?} */
    LSelect2Component.prototype.required;
    /** @type {?} */
    LSelect2Component.prototype.maxCount;
    /** @type {?} */
    LSelect2Component.prototype.minCount;
    /** @type {?} */
    LSelect2Component.prototype.valueChange;
    /** @type {?} */
    LSelect2Component.prototype.selectedValue;
    /**
     * @type {?}
     * @private
     */
    LSelect2Component.prototype._jqueryElement;
    /**
     * @type {?}
     * @private
     */
    LSelect2Component.prototype._onChange;
    /**
     * @type {?}
     * @private
     */
    LSelect2Component.prototype._onTouched;
    /**
     * @type {?}
     * @private
     */
    LSelect2Component.prototype._renderer;
}
//# sourceMappingURL=data:application/json;base64,