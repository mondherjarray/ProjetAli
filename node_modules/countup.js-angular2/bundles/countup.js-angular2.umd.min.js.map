{"version":3,"sources":["ng://countup.js-angular2/lib/count-up.directive.ts","ng://countup.js-angular2/lib/count-up.module.ts"],"names":["CountUpDirective","el","this","complete","EventEmitter","prototype","onClick","reanimateOnClick","animate","ngOnChanges","changes","endVal","currentValue","countUp","createCountUp","start","startVal","duration","decimals","CountUp","nativeElement","options","Math","abs","up","_this","reset","update","setTimeout","emit","Directive","args","selector","ElementRef","Input","HostListener","Output","CountUpModule","NgModule","imports","declarations","exports"],"mappings":"6VAAA,IAAAA,EAAA,WAgDE,SAAAA,EAAoBC,GAAAC,KAAAD,GAAAA,EAFVC,KAAAC,SAAW,IAAIC,EAAAA,aA6C3B,OApDEJ,EAAAK,UAAAC,QADA,WAEMJ,KAAKK,kBACPL,KAAKM,WASTR,EAAAK,UAAAI,YAAA,SAAYC,GACNA,EAAQC,QAAUD,EAAQC,OAAOC,eACnCV,KAAKW,QAAUX,KAAKY,gBACpBZ,KAAKM,YAIDR,EAAAK,UAAAS,cAAR,eACQC,EAAQb,KAAKc,UAAY,EACzBC,EAAWf,KAAKe,UAAY,EAC5BC,EAAWhB,KAAKgB,UAAY,EAE7BhB,KAAKe,WACRf,KAAKe,SAAWA,OAIdJ,EAAU,IAAIM,EAAQjB,KAAKD,GAAGmB,cAAeL,EAAOb,KAAKS,OAAQO,EAAUD,EAAUf,KAAKmB,SAG9F,GAAW,IAFEC,KAAKC,IAAIrB,KAAKS,OAASI,GAEpB,KACRS,EAAMtB,KAAKS,OAASI,GAAU,EAAI,EACxCF,EAAU,IAAIM,EAAQjB,KAAKD,GAAGmB,cAAeL,EAAOb,KAAKS,OAAe,IAALa,EAAWN,EAAUD,EAAW,EAAGf,KAAKmB,SAG7G,OAAOR,GAGDb,EAAAK,UAAAG,QAAR,WAAA,IAAAiB,EAAAvB,KACEA,KAAKW,QAAQa,QACK,IAAdxB,KAAKS,QACPT,KAAKW,QAAQE,MAAM,WAAM,OAAAU,EAAKZ,QAAQc,OAAOF,EAAKd,UAClDiB,WAAW,WACTH,EAAKtB,SAAS0B,QACG,IAAhB3B,KAAKe,WAERf,KAAKW,QAAQE,MAAM,WACjBU,EAAKtB,SAAS0B,8BA3ErBC,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,yDAXVC,EAAAA,+CAiBCC,EAAAA,MAAKH,KAAA,CAAC,6BAGNG,EAAAA,sBAGAA,EAAAA,wBAGAA,EAAAA,wBAGAA,EAAAA,gCAIAA,EAAAA,uBAGAC,EAAAA,aAAYJ,KAAA,CAAC,2BAQbK,EAAAA,UA6CHpC,EA3FA,GCAAqC,EAAA,WAGA,SAAAA,KAK6B,2BAL5BC,EAAAA,SAAQP,KAAA,CAAC,CACRQ,QAAS,GACTC,aAAc,CAACxC,GACfyC,QAAS,CAACzC,OAEiBqC,EAR7B","sourcesContent":["import {\n  Directive,\n  ElementRef,\n  Input,\n  Output,\n  HostListener,\n  EventEmitter,\n  OnChanges,\n  SimpleChanges\n} from '@angular/core';\nimport * as CountUp from 'countup.js';\n\n@Directive({\n  selector: '[countUp]'\n})\nexport class CountUpDirective implements OnChanges {\n\n  countUp: any;\n  // Optional extra configuration, such as easing.\n  @Input('countUp') options: any;\n\n  // Optional start value for the count. Defaults to zero.\n  @Input() startVal: number;\n\n  // the number to count to\n  @Input() endVal: number;\n\n  // Optional duration of the animation in seconds. Default is 2.\n  @Input() duration: number;\n\n  // Optional number of decimal places. Default is 2.\n  @Input() decimals: number;\n  \n  // Optional flag for specifying whether the element should re-animate when clicked.\n  // Default is true.\n  @Input() reanimateOnClick: boolean;\n\n  // Re-animate if preference is set.\n  @HostListener('click')\n  onClick() {\n    if (this.reanimateOnClick) {\n      this.animate();\n    }\n  }\n\n  // on-complete event emitter\n  @Output() complete = new EventEmitter<void>();\n\n  constructor(private el: ElementRef) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.endVal && changes.endVal.currentValue) {\n      this.countUp = this.createCountUp();\n      this.animate();\n    }\n  }\n\n  private createCountUp(): any {\n    const start = this.startVal || 0;\n    const duration = this.duration || 2;\n    const decimals = this.decimals || 0;\n\n    if (!this.duration) {\n      this.duration = duration;\n    }\n\n    // construct countUp\n    let countUp = new CountUp(this.el.nativeElement, start, this.endVal, decimals, duration, this.options);\n    const diff = Math.abs(this.endVal - start);\n    // make easing smoother for large numbers\n    if (diff > 999) {\n      const up = (this.endVal > start) ? -1 : 1;\n      countUp = new CountUp(this.el.nativeElement, start, this.endVal + (up * 100), decimals, duration / 2, this.options);\n    }\n\n    return countUp;\n  }\n\n  private animate() {\n    this.countUp.reset();\n    if (this.endVal > 999) {\n      this.countUp.start(() => this.countUp.update(this.endVal));\n      setTimeout(() => {\n        this.complete.emit();\n      }, this.duration * 1000);\n    } else {\n      this.countUp.start(() => {\n        this.complete.emit();\n      });\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CountUpDirective } from './count-up.directive';\n\n@NgModule({\n  imports: [],\n  declarations: [CountUpDirective],\n  exports: [CountUpDirective]\n})\nexport class CountUpModule { }\n"]}